---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: spotter-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - currency-spotter
- name: operation-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - operation
- name: wallet-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - wallet
- name: ui-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - ui

- name: src-ci
  type: git
  source:
    uri: ((github.uri))
    branch: master
    private_key: ((github.private-key))

- name: docker-image-spotter
  type: docker-image
  source:
    repository: ((docker.registry.repository-spotter))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-operation
  type: docker-image
  source:
    repository: ((docker.registry.repository-operation))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-wallet
  type: docker-image
  source:
    repository: ((docker.registry.repository-wallet))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-ui
  type: docker-image
  source:
    repository: ((docker.registry.repository-ui))
    username: ((docker.registry.username))
    password: ((docker.registry.password))
    
jobs:     
- name: Build Spotter Service
  plan:
  - get: spotter-src
    trigger: true
    version: every
  - get: src-ci
  - task: "Build Spotter with Maven"
    file: src-ci/ci/tasks/maven-package/maven-package.yml
    input_mapping:
      src: spotter-src
      src-ci: src-ci
    params:
      BUILD_PATH: currency-spotter
  - put: docker-image-spotter
    params:
      build: build

- name: Spotter Service Integration Tests
  plan:
  - get: docker-image-spotter
    passed: ["Build Spotter Service"]
    trigger: true
  - get: src-ci

- name: Build Operation Service
  plan:
  - get: operation-src
    trigger: true
    version: every
  - get: src-ci
  - task: "Build Operation with Golang"
    file: src-ci/ci/tasks/kafka-go-build/kafka-go-build.yml
    input_mapping:
      src: operation-src
      src-ci: src-ci
    params:
      BUILD_PATH: operation
  - put: docker-image-operation
    params:
      build: build

- name: Operation Service Integration Tests
  plan:
  - get: docker-image-operation
    passed: ["Build Operation Service"]
    trigger: true
  - get: src-ci

- name: Build Wallet Service
  plan:
  - get: wallet-src
    trigger: true
    version: every
  - get: src-ci
  - put: docker-image-wallet
    params:
      build: wallet-src/wallet

- name: Wallet Service Integration Tests
  plan:
  - get: docker-image-wallet
    passed: ["Build Wallet Service"]
    trigger: true
  - get: src-ci

- name: Build Frontend
  plan:
  - get: ui-src
    trigger: true
    version: every
  - get: src-ci
  - task: "Build UI with Maven and NPM"
    file: src-ci/ci/tasks/maven-package/maven-package.yml
    input_mapping:
      src: ui-src
      src-ci: src-ci
    params:
      BUILD_PATH: ui
  - put: docker-image-ui
    params:
      build: build

- name: Deploy Environment with Docker Compose
  plan:
  - get: src-ci
  - get: docker-image-wallet
    passed: ["Wallet Service Integration Tests"]
    trigger: true
  - get: docker-image-operation
    passed: ["Operation Service Integration Tests"]
    trigger: true
  - get: docker-image-spotter
    passed: ["Spotter Service Integration Tests"]
    trigger: true
  - get: docker-image-ui
    passed: ["Build Frontend"]
    trigger: true

- name: Run Acceptance Tests
  plan:
  - get: src-ci
  - get: docker-image-wallet
    passed: ["Deploy Environment with Docker Compose"]
    trigger: true
  - get: docker-image-operation
    passed: ["Deploy Environment with Docker Compose"]
    trigger: true
  - get: docker-image-spotter
    passed: ["Deploy Environment with Docker Compose"]
    trigger: true
  - get: docker-image-ui
    passed: ["Deploy Environment with Docker Compose"]
    trigger: true