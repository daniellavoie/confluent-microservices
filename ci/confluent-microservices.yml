---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: spotter-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - currency-spotter
    - integration-tests/currency-spotter-it

- name: operation-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - operation

- name: wallet-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - wallet

- name: ui-src
  type: pull-request
  source:
    repository: ((github.repository))
    access_token: ((github.access-token))
    paths: 
    - ui

- name: src-ci
  type: git
  source:
    uri: ((github.uri))
    branch: master
    private_key: ((github.private-key))

- name: docker-image-spotter
  type: docker-image
  source:
    repository: ((docker.registry.repository-spotter))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-operation
  type: docker-image
  source:
    repository: ((docker.registry.repository-operation))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-wallet
  type: docker-image
  source:
    repository: ((docker.registry.repository-wallet))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: docker-image-ui
  type: docker-image
  source:
    repository: ((docker.registry.repository-ui))
    username: ((docker.registry.username))
    password: ((docker.registry.password))

- name: spotter-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/spotter-version
    access_key_id: ((s3.access-key-id))
    secret_access_key: ((s3.secret-access-key))
    region_name: ((s3.region-name))

- name: operation-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/operation-version
    access_key_id: ((access-key-id))
    secret_access_key: ((secret-access-key))
    region_name: ((s3.region-name))

- name: wallet-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/wallet-version
    access_key_id: ((access-key-id))
    secret_access_key: ((secret-access-key))
    region_name: ((s3.region-name))

- name: ui-version
  type: s3
  source:
    bucket: ((s3.bucket))
    versioned_file: versions/ui-version
    access_key_id: ((access-key-id))
    secret_access_key: ((secret-access-key))
    region_name: ((s3.region-name))

jobs:

- name: Build Spotter Service
  plan:
  - get: spotter-src
    trigger: true
    version: every
  - put: spotter-src
    params:
      path: spotter-src
      status: PENDING
  - get: src-ci
  - task: "Build Spotter with Maven"
    file: src-ci/ci/tasks/maven/maven-package.yml
    input_mapping:
      src: spotter-src
      src-ci: src-ci
    params:
      BUILD_PATH: currency-spotter
  - put: docker-image-spotter
    params:
      build: build
      tag_file: version/version
  - put: spotter-version
    params:
      file: version/version
  on_failure:
    put: spotter-src
    params:
      path: spotter-src
      status: FAILURE

- name: Spotter Service Integration Tests
  plan:
  - get: spotter-src
    passed: ["Build Spotter Service"]
  - get: spotter-version
    passed: ["Build Spotter Service"]
  - get: src-ci
  - get: docker-image-spotter
    passed: ["Build Spotter Service"]
    trigger: true
  - task: Docker Compose Deployment
    file: src-ci/ci/tasks/deploy/deploy.yml
    input_mapping:
      ci: src-ci
    params:
      DEPLOYMENT_NAME: spotter-it
      DOCKER_SERVER: ((docker.server))
      DOCKER_SSH_USER: ((docker.ssh-user))
      DOCKER_SSH_PRIVATE_KEY: ((docker.ssh-private-key))
      DOCKER_COMPOSE_FILE: ci/ci/docker-compose/integration-tests/spotter-it/docker-compose.yml
      REGISTRY_URL: ((docker.registry.url))
      REGISTRY_USERNAME: ((docker.registry.username))
      REGISTRY_PASSWORD: ((docker.registry.password))
      KAFKA_PORT: 11000
  - task: "Run Spotter Integration Tests with Maven"
    file: src-ci/ci/tasks/maven/maven-test.yml
    input_mapping:
      src: spotter-src
    params:
      BUILD_PATH: integration-tests/currency-spotter-it
      ENVIRONMENT_FILE: src-ci/ci/env-vars/integration-tests/spotter-it
  - put: spotter-src
    params:
      path: spotter-src
      status: SUCCESS
  on_failure:
    put: spotter-src
    params:
      path: spotter-src
      status: FAILURE

- name: Build Operation Service
  plan:
  - get: operation-src
    trigger: true
    version: every
  - get: src-ci
  - task: "Build Operation with Golang"
    file: src-ci/ci/tasks/kafka-go-build/kafka-go-build.yml
    input_mapping:
      src: operation-src
      src-ci: src-ci
    params:
      BUILD_PATH: operation
  - put: docker-image-operation
    params:
      build: build
      tag_file: operation-src/version
  - put: operation-version
    params:
      file: operation-src/version
  on_failure:
    put: operation-src
    params:
      path: spotter-src
      status: FAILURE

- name: Operation Service Integration Tests
  plan:
  - get: src-ci
  - get: operation-version
    passed: ["Build Operation Service"]
  - get: operation-src
    passed: ["Build Operation Service"]
  - get: docker-image-operation
    passed: ["Build Operation Service"]
    trigger: true
  - put: operation-version
    params:
      file: operation-src/version
  - task: Docker Compose Deployment
    file: src-ci/ci/tasks/deploy/deploy.yml
    input_mapping:
      ci: src-ci
    params:
      DEPLOYMENT_NAME: operation-it
      DOCKER_SERVER: ((docker.server))
      DOCKER_SSH_USER: ((docker.ssh-user))
      DOCKER_SSH_PRIVATE_KEY: ((docker.ssh-private-key))
      DOCKER_COMPOSE_FILE: ci/ci/docker-compose/integration-tests/spotter-it/docker-compose.yml
      REGISTRY_URL: ((docker.registry.url))
      REGISTRY_USERNAME: ((docker.registry.username))
      REGISTRY_PASSWORD: ((docker.registry.password))
      KAFKA_PORT: 12000
  - task: "Run Operation Integration Tests with Maven"
    file: src-ci/ci/tasks/maven/maven-test.yml
    input_mapping:
      src: spotter-src
    params:
      BUILD_PATH: integration-tests/operation-it
      ENVIRONMENT_FILE: src-ci/ci/env-vars/integration-tests/operation-it
  - put: operation-src
    params:
      path: operation-src
      status: SUCCESS
  on_failure:
    put: operation-src
    params:
      path: spotter-src
      status: FAILURE

- name: Build Wallet Service
  plan:
  - get: wallet-src
    trigger: true
    version: every
  - get: src-ci
  - put: docker-image-wallet
    params:
      build: wallet-src/wallet
      tag_file: wallet-src/version
  - put: wallet-version
    params:
      file: wallet-src/version
  on_failure:
    put: wallet-src
    params:
      path: wallet-src
      status: FAILURE

- name: Wallet Service Integration Tests
  plan:
  - get: src-ci
  - get: wallet-version
    passed: ["Build Wallet Service"]
  - get: wallet-src
    passed: ["Build Wallet Service"]
  - get: docker-image-wallet
    passed: ["Build Wallet Service"]
    trigger: true
  - task: Docker Compose Deployment
    file: src-ci/ci/tasks/deploy/deploy.yml
    input_mapping:
      ci: src-ci
    params:
      DEPLOYMENT_NAME: wallet-it
      DOCKER_SERVER: ((docker.server))
      DOCKER_SSH_USER: ((docker.ssh-user))
      DOCKER_SSH_PRIVATE_KEY: ((docker.ssh-private-key))
      DOCKER_COMPOSE_FILE: ci/ci/docker-compose/integration-tests/wallet-it/docker-compose.yml
      REGISTRY_URL: ((docker.registry.url))
      REGISTRY_USERNAME: ((docker.registry.username))
      REGISTRY_PASSWORD: ((docker.registry.password))
  - task: "Run Operation Integration Tests with Maven"
    file: src-ci/ci/tasks/maven/maven-test.yml
    input_mapping:
      src: spotter-src
    params:
      BUILD_PATH: integration-tests/wallet-it
      ENVIRONMENT_FILE: src-ci/ci/env-vars/integration-tests/wallet-it
  - put: wallet-src
    params:
      path: wallet-src
      status: SUCCESS
  on_failure:
    put: wallet-src
    params:
      path: wallet-src
      status: FAILURE

- name: Build Frontend
  plan:
  - get: ui-src
    trigger: true
    version: every
  - get: src-ci
  - task: "Build UI with Maven and NPM"
    file: src-ci/ci/tasks/maven/maven-package.yml
    input_mapping:
      src: ui-src
      src-ci: src-ci
    params:
      BUILD_PATH: ui
  - put: docker-image-ui
    params:
      build: build
      tag_file: version/version
  - put: ui-version
    params:
      file: version/version

- name: Deploy Dev Environment with Docker Compose
  plan:
  - get: src-ci
  - get: spotter-version
    passed: ["Spotter Service Integration Tests"]
  - get: operation-version
    passed: ["Operation Service Integration Tests"]
  - get: wallet-version
    passed: ["Wallet Service Integration Tests"]
  - get: ui-version
    passed: ["Build Frontend"]
  - get: docker-image-wallet
    passed: ["Wallet Service Integration Tests"]
    trigger: true
  - get: docker-image-operation
    passed: ["Operation Service Integration Tests"]
    trigger: true
  - get: docker-image-spotter
    passed: ["Spotter Service Integration Tests"]
    trigger: true
  - get: docker-image-ui
    passed: ["Build Frontend"]
    trigger: true

- name: Run Acceptance Tests
  plan:
  - get: src-ci
  - get: spotter-version
    passed: ["Deploy Dev Environment with Docker Compose"]
  - get: operation-version
    passed: ["Deploy Dev Environment with Docker Compose"]
  - get: wallet-version
    passed: ["Deploy Dev Environment with Docker Compose"]
  - get: ui-version
    passed: ["Deploy Dev Environment with Docker Compose"]
  - get: docker-image-wallet
    passed: ["Deploy Dev Environment with Docker Compose"]
    trigger: true
  - get: docker-image-operation
    passed: ["Deploy Dev Environment with Docker Compose"]
    trigger: true
  - get: docker-image-spotter
    passed: ["Deploy Dev Environment with Docker Compose"]
    trigger: true
  - get: docker-image-ui
    passed: ["Deploy Dev Environment with Docker Compose"]
    trigger: true

- name: Deploy Prod Environment with Docker Compose
  plan:
  - get: src-ci
    passed: ["Run Acceptance Tests"]
  - get: docker-image-wallet
    passed: ["Run Acceptance Tests"]
  - get: docker-image-operation
    passed: ["Run Acceptance Tests"]
  - get: docker-image-spotter
    passed: ["Run Acceptance Tests"]
  - get: docker-image-ui
    passed: ["Run Acceptance Tests"]